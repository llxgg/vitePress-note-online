import{_ as i,c as s,o as e,aV as a}from"./chunks/framework.D-slqnxL.js";const t="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/1.%E6%9C%AC%E5%9C%B0%E6%9C%89%E4%B8%89%E4%B8%AAcommit%E5%BE%85%E6%8F%90%E4%BA%A4.png",n="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/2.%E8%BE%93%E5%85%A5git-rebase%E6%8C%87%E4%BB%A4.png",l="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/3.%E8%BF%9B%E5%85%A5vi%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F.png",c="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/4.%E5%B0%86pick%E5%91%BD%E4%BB%A4%E4%BF%AE%E6%94%B9%E4%B8%BAsquash.png",o="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/5.%E9%80%80%E5%87%BAvi%E7%95%8C%E9%9D%A2%E5%90%8E%EF%BC%8C%E4%BC%9A%E8%BF%9B%E5%85%A5commit-message%E7%9A%84%E7%BC%96%E8%BE%91%E7%95%8C%E9%9D%A2.png",p="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/6.%E5%88%A0%E9%99%A4%E5%B9%B6%E4%B8%94%E9%87%8D%E6%96%B0%E8%AE%BE%E7%BD%AE%E4%B8%80%E6%9D%A1%E6%96%B0%E7%9A%84commit-message.png",m="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/7.%E6%9F%A5%E7%9C%8B%E5%90%88%E5%B9%B6%E5%90%8E%E7%9A%84commit%E8%AE%B0%E5%BD%95.png",E="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/8.%E4%BD%BF%E7%94%A8git-rebase-i-HEAD~n%E5%91%BD%E4%BB%A4.png",d="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/9.%E5%B0%86pick%E4%BF%AE%E6%94%B9%E4%B8%BAsquash.png",r="/vitePress-note-online/engineeringAdvanced/Git/Git%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit/10.%E8%BF%9B%E5%85%A5commit-message%E7%BC%96%E8%BE%91%E7%95%8C%E9%9D%A2.png",C=JSON.parse('{"title":"","description":"","frontmatter":{"typora-root-url":"..\\\\..\\\\..\\\\..\\\\public"},"headers":[],"relativePath":"pages/engineeringAdvanced/Git/Project/3_合并修改commit.md","filePath":"pages/engineeringAdvanced/Git/Project/3_合并修改commit.md","lastUpdated":1727689213000}'),h={name:"pages/engineeringAdvanced/Git/Project/3_合并修改commit.md"},g=a(`<h2 id="commit问题" tabindex="-1">commit问题 <a class="header-anchor" href="#commit问题" aria-label="Permalink to &quot;commit问题&quot;">​</a></h2><h3 id="重新add后-合并commit描述" tabindex="-1">重新add后，合并commit描述 <a class="header-anchor" href="#重新add后-合并commit描述" aria-label="Permalink to &quot;重新add后，合并commit描述&quot;">​</a></h3><ul><li>本地已经commit了一次，但是需要二次需改，这时不想产生一个新的commit:</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git add </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.vue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">amend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;重新更改&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 语法一：重新修改commit描述</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">amend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">edit </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 语法二：或者不修改commit描述，直接使用上一次的描述信息</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="重新修改commit描述" tabindex="-1">重新修改commit描述 <a class="header-anchor" href="#重新修改commit描述" aria-label="Permalink to &quot;重新修改commit描述&quot;">​</a></h3><ul><li>commit描述不正确，或者不完整，可以重新修改</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">amend</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会进入vi编辑界面，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如需修改就输入i进入编辑状态，按esc退出编辑状态，然后输入:wq保存并退出，不需修改就:q退出</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不改动描述信息的写法：git commit --amend --no-edit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="将多个commit合并成一个" tabindex="-1">将多个commit合并成一个 <a class="header-anchor" href="#将多个commit合并成一个" aria-label="Permalink to &quot;将多个commit合并成一个&quot;">​</a></h3><ul><li>如果当前任务比较复杂，代码量比较多，我通常会多次使用 <strong>git add .</strong> 和 <strong>git commit -m &quot;xxx&quot;</strong> 保存</li><li>或者代码发生冲突，需要重新 <code>commit</code> 但是不需要将这个冲突的 <code>commit</code> 也提交到远程仓库</li><li>这时候就需要 <strong>合并commit</strong> 了</li><li>案例：假设我们本地有3个 commit待提交（如果直接提交到远程仓库的话，自己一个人就创建了三条commit记录，这样很不好）。</li></ul><h3 id="方式一-git-rebase合并commit" tabindex="-1">方式一：<code>git rebase合并commit</code> <a class="header-anchor" href="#方式一-git-rebase合并commit" aria-label="Permalink to &quot;方式一：\`git rebase合并commit\`&quot;">​</a></h3><ul><li><p><code>git log</code> 查看commit信息</p><p><img src="`+t+'" alt="1.本地有三个commit待提交"></p></li><li><p><code>git rebase -i</code> 操作commit信息</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">我们需要将  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`c4e858b5`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  和 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`2dfbc7e8`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 这两个commit，合并成一个 commit，那么我们输入如下命令：</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">语法一：git rebase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HEAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n：表示要合并的commit个数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">语法二：git rebase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i flf92b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 指定版本id，一般为前6位即可，</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:当前指定的版本id不参与合并。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="'+n+'" alt="2.输入git-rebase指令"></p></li><li><p>进入 <code>vi</code> 文本编辑模式</p><p><img src="'+l+'" alt="3.进入vi编辑模式"></p></li><li><p>认识 <code>pick</code> 和 <code>squash</code> 这两个命令</p><ul><li><code>pick</code> 的意思是要会执行这个 commit</li><li><code>squash</code> 的意思是这个 commit 会被合并到前一个commit，可以简写为 <code>s</code></li></ul></li><li><p>合并commit后退出 <code>vi</code> 模式</p><ul><li>我们将 <code>c4e858b5</code> 这个 commit 前面的 <code>pick</code> 命令改成 <code>squash</code> 或 <code>s</code>，然后保存并退出</li><li><strong>fix: 必须要留一个pick，因为需要有一个commit被别人合并过来</strong></li></ul><p><img src="'+c+'" alt="4.将pick命令修改为squash"></p></li><li><p>输入<code>esc</code> 和 <code> :wq</code>保存并退出，会重新弹出<code>vi</code> 模式，提示编辑 <code>commit message</code> 描述信息</p><p><img src="'+o+'" alt="5.退出vi界面后，会进入commit-message的编辑界面"></p></li><li><p>重新设置一条新的commit信息</p><ul><li>没有 <code>#</code> 开头的就是两次的 commit message, 你要做的就是将这两个commit message删除，并且重新设置一条新的commit信息。</li></ul><p><img src="'+p+'" alt="6.删除并且重新设置一条新的commit-message"></p></li><li><p>输入<code>esc</code> 和 <code> :wq</code>保存并退出，重新输入<code>git log</code>查看 commit 历史信息</p><ul><li>你会发现由原来三个commit变成了现在的两个 commit，则说明 <code>c4e858b5</code> 和 <code>2dfbc7e8</code> 这两个commit已经合并成一个新的 commit，<code>flf92b</code>这个版本id对应的commit不参与合并。</li></ul><p><img src="'+m+'" alt="7.查看合并后的commit记录"></p></li><li><p>注意事项：如果这个过程中有操作错误，可以使用 <code>git rebase --abort</code>来撤销修改，回到没有开始操作合并之前的状态。</p></li></ul><h3 id="方式二-git-rebase合并commit" tabindex="-1">方式二：<code>git rebase合并commit </code> <a class="header-anchor" href="#方式二-git-rebase合并commit" aria-label="Permalink to &quot;方式二：`git rebase合并commit `&quot;">​</a></h3><ul><li><p><code>git log</code> 查看commit信息，发现一共有6个commit。</p></li><li><p>输入 <code>git rebase -i HEAD~6</code> 进行合并，合并成一条commit。</p></li><li><p>这时候，会进入vi编辑模式：按键盘 <code>i</code> 进入编辑；</p><p><img src="'+E+'" alt="8.使用git-rebase-i-HEAD~n命令"></p></li><li><p>需要认识 <code>pick</code> 和 <code>squash</code> 这两个命令：</p><ul><li><code>pick</code> 的意思是要会执行这个 commit</li><li><code>squash</code> 的意思是这个 commit 会被合并到前一个commit，可以简写为 <code>s</code></li></ul></li><li><p><strong>将要合并的提交 <code>pick</code> 改为 <code>squash</code> 或则 <code>s</code>，将下面5条commit压缩到第一条，第一条不要改 <code>pick</code></strong></p><ul><li>一般把第一个 pick 保留，把后面其余的commit 提交 和 第一个commit 合并在一起。</li></ul><p><img src="'+d+'" alt="9.将pick修改为squash"></p></li><li><p><strong>修改完毕后，按esc退出编辑，按:wq保存并退出，这时候，有可能会提示冲突</strong></p><ul><li>如果有冲突，可以先解决冲突，解决完之后执行：<strong>git add . 和 git rebase --continue</strong></li><li>如果没有冲突，则会看到 commit message 的编辑界面：</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">其中, 非注释部分（没有</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`#开头`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）就是 commit message, 你要做的就是将这些 commit message删除，并且重新设置一条新的commit message描述。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">也就是将 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`place enter the commit message for your changes. Lines starting`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 前面的删除，然后重新指定一条新的message</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="'+r+'" alt="10.进入commit-message编辑界面"></p></li><li><p>输入<code>git log</code>查看 commit 历史信息，你会发现由原来六个commit变成了现在的一个 commit</p></li><li><p>提交到远程仓库：</p><ul><li>合并commit之后，由于 commit 记录发生了变基，需要使用 <strong>-f</strong> 关键字提交，如果在主分支请谨慎使用 <strong>-f</strong> 提交，因为有可能会覆盖别人的代码。</li><li><strong>最后执行 git push -f 提交代码就可以了（不要拉取代码，不然就白合并了 - 这句话应该有问题，尝试本地使用git pull 发现新合并的commit并没有丢失）</strong></li></ul></li></ul>',13),k=[g];function A(B,u,b,v,y,_){return e(),s("div",null,k)}const D=i(h,[["render",A]]);export{C as __pageData,D as default};
