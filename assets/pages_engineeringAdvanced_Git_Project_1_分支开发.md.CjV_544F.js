import{_ as s,c as a,o as i,aV as n}from"./chunks/framework.IgyRtAO-.js";const g=JSON.parse('{"title":"分支操作","description":"","frontmatter":{},"headers":[],"relativePath":"pages/engineeringAdvanced/Git/Project/1_分支开发.md","filePath":"pages/engineeringAdvanced/Git/Project/1_分支开发.md","lastUpdated":1728314951000}'),l={name:"pages/engineeringAdvanced/Git/Project/1_分支开发.md"},e=n(`<h1 id="分支操作" tabindex="-1">分支操作 <a class="header-anchor" href="#分支操作" aria-label="Permalink to &quot;分支操作&quot;">​</a></h1><blockquote><p>包含创建、删除、切换、合并分支等。</p></blockquote><h2 id="按对应分支拉取仓库代码" tabindex="-1">按对应分支拉取仓库代码 <a class="header-anchor" href="#按对应分支拉取仓库代码" aria-label="Permalink to &quot;按对应分支拉取仓库代码&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git clone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(只拉取dev分支的代码) 仓库地址</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="查看分支" tabindex="-1">查看分支 <a class="header-anchor" href="#查看分支" aria-label="Permalink to &quot;查看分支&quot;">​</a></h2><ul><li>查看本地分支： <code>git branch</code> 会列出本地所有分支。</li><li>查看远程分支：<code>git branch -r</code> 会列出远程仓库所有分支。</li><li>同时查看本地和远程分支： <code>git branch -a</code></li></ul><h2 id="删除分支" tabindex="-1">删除分支 <a class="header-anchor" href="#删除分支" aria-label="Permalink to &quot;删除分支&quot;">​</a></h2><ul><li>删除本地分支</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 删除已经合并的分支：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d 要删除的分支名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 强制删除未合并的分支：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 要删除的分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>删除远程分支</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 要删除的分支名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 执行上面的命令，已经把远程仓库的分支也删除了。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="创建分支" tabindex="-1">创建分支 <a class="header-anchor" href="#创建分支" aria-label="Permalink to &quot;创建分支&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch 分支名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 也可以使用 checkout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b 来新建分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b 分支名称</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="切换分支" tabindex="-1">切换分支 <a class="header-anchor" href="#切换分支" aria-label="Permalink to &quot;切换分支&quot;">​</a></h2><ul><li><code>-b</code> 的意思是新建分支，但是不管有没有该分支，带上也不影响。</li><li>如果<strong>本地</strong>已存在名为 <code>dev</code> 的分支，则会切换到 <code>dev</code> 分支。</li><li>如果<strong>本地</strong>不存在名为 <code>dev</code> 的分支，则会创建一个名为 <code>dev</code> 的新分支，并将切换前的分支代码克隆到新分支。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="个人分支开发" tabindex="-1">个人分支开发 <a class="header-anchor" href="#个人分支开发" aria-label="Permalink to &quot;个人分支开发&quot;">​</a></h2><ul><li>在多人协同开发环境下，有些公司要求要有自己的分支更新代码。</li><li>所以需要在本地创建一个自己的分支</li><li>值得注意的是，你从哪个分支上开始创建分支的，它就把你那个分支上的内容拷贝一份并切换到你新建的分支</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b basic</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在你修改完并保存后，就想推送到远程仓库，但是远程仓库只有<code>master | test | dev</code> 三个分支。</li><li>所以需要将自己分支的代码合并到dev分支上，然后再提交到远程仓库。</li><li>先将本地自己分支上改好的代码，commit到暂存区中，避免后面代码丢失。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git add .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;修改了md文件&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">上面的两行代码等价于：git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;修改了md文件&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>最后在合并分支前，一定要将当前的开发分支<code>basic</code> 的代码commit暂存一下</li><li>然后切换到想要合并的分支（续上面的个人分支开发好之后，合并到dev分支）</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这时候打开dev分支下的代码，还是属于dev的，并没有my-dev分支的代码。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 然后可以使用 git merge basic 指令把basic分支修改的内容合并到dev分支上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git merge basic </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提示 file changed... 说明合并成功</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>上面步骤执行完毕后，重新切换回 <code>basic</code> 分支，然后查看记录，可以看到 <code>basic</code> 分支的代码并没有推送到远程仓库，也并不需要推送到远程仓库，否则远程仓库会有你自己的 <code>basic</code>分支。</li><li>所以本地分支 <code>basic</code> 只需要执行 <code>git add .</code> 和 <code>git commit -m&#39;&#39;</code> 即可，无需 <code>git push</code></li><li>如果当前业务已经开发完毕，则可以将本地 <code>basic</code>分支删除 <ul><li>不能直接在 <code>basic</code>分支删除<code>basic</code>分支，需要切换到其他分支才能删除 <code>basic</code>分支</li><li>删除指令：<code>git branch --delete basic</code></li></ul></li><li><strong>注意：</strong> 虽然将 <code>basic</code>分支删除，如果重新创建回来，还是可以通过 <code>git log</code> 命令查看以前的操作的。</li></ul><h2 id="提交代码到远程" tabindex="-1">提交代码到远程 <a class="header-anchor" href="#提交代码到远程" aria-label="Permalink to &quot;提交代码到远程&quot;">​</a></h2><ul><li>上面我们已经把代码改完并合并到本地的dev分支了，现在就差把dev分支上的内容提交到远程仓库</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 注意：如果远程仓库没有dev分支，会报错。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">这时候按提示信息解决即可：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upstream origin dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><p><code>--set-upstream origin dev</code>: 设置当前分支 <code>dev</code> 的远程跟踪分支为 <code>origin/dev</code>，这样之后执行 <code>git push</code> 或 <code>git pull</code> 时就不需要再指定远程分支了。</p></li><li><p>执行这条命令后，Git 将会将本地的 dev 分支与远程仓库的 dev 分支关联起来</p></li><li><p>后面可以直接使用 <code>git push</code> 和 <code>git pull</code> 命令 来更新dev分支的代码了。</p></li></ul><h2 id="不同分支管理" tabindex="-1">不同分支管理 <a class="header-anchor" href="#不同分支管理" aria-label="Permalink to &quot;不同分支管理&quot;">​</a></h2><ul><li><p>假如突然有一天在本地自己分支开发中，突然接到一个紧急的缺陷要修复，那如何快速处理呢？</p></li><li><p>因为已经在<code>个人分支</code> 或 <code>其他分支</code> 上做了代码修改操作，不能立马切换到其他分支修改缺陷并提交。</p></li><li><p>正确的做法是：<strong>先暂存当前本地自己的分支代码，再切换到dev分支</strong></p></li><li><p><strong>注意：这里只是切换不是合并，相当于你保存了<code>my-dev</code>分支，等有空了再回来完善，临时切换到dev分支，两个分支相互独立！</strong></p></li><li><p><strong>注意：这里的保存不是add 和 commit，而是另一个语法：<code>git stash</code></strong></p></li><li><p>如果本地自己分支代码没有变动，则不需要执行 <code>git stash</code> 直接切换会 <code>dev分支</code> 修复缺陷即可。</p></li></ul><h2 id="正式环境代码出现紧急bug" tabindex="-1">正式环境代码出现紧急Bug <a class="header-anchor" href="#正式环境代码出现紧急bug" aria-label="Permalink to &quot;正式环境代码出现紧急Bug&quot;">​</a></h2><ul><li>首先切换到master分支并拉取最新代码</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout master</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git pull</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>然后需要一个 <code>hotfix</code> 热修复分支</li><li>其主要作用是在不影响正在开发的主分支，快速地修复生产环境中的问题。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 新建并切换到热修复分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b hotfix</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>在<code>hotfix</code>分支上修复完bug后，需要合并到线上分支<code>master</code>，并推送</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 假设已经修复完bug</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git add .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;临时修复bug:v-1.0.0&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 切换回master分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 合并热修复分支的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git merge hotfix</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 推送到master远程分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><strong>这样就能进行临时修复了</strong>，但是也要注意把临时修复的内容合并到dev分支</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 切换回dev分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 合并热修复分支的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git merge hotfix</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 推送到dev远程分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="合并分支" tabindex="-1">合并分支 <a class="header-anchor" href="#合并分支" aria-label="Permalink to &quot;合并分支&quot;">​</a></h2><ul><li>将 <code>test</code> 分支合并到 <code>master分支</code></li><li>测试通过后，将代码合并到 <code>master分支</code> 发布到生产环境。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">一、在dev分支上运行以下命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">　　1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git add . </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 暂存所有更改</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">　　2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;更改的备注信息&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将修改 提交到本地仓库，双引号内是提交的备注信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">　　3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git pull origin dev </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 拉取远程dev分支代码</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">　　4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git push origin dev </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将本地修改的代码提交到远程的dev分支上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">　　5.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git checkout master </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 切换到master分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">二、在master分支上运行以下命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">　　1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git merge dev </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将dev分支的代码合并到master上</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">　 2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git push origin master </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将当前的更改推送到远程的master分支上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 执行完以上命令，此时dev分支与master分支的代码已同步。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 查看已经合并的分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">merged</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 查看未合并的分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">merged</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="撤销合并" tabindex="-1">撤销合并 <a class="header-anchor" href="#撤销合并" aria-label="Permalink to &quot;撤销合并&quot;">​</a></h2><ul><li></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 来个最简单高效的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git pull </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f origin master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 作用：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">拉取远程master分支 , 强制覆盖当前分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">不管你本地做了什么乱七八糟的操作 , 用这个就能和远程保持一致</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 方案二：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git reflog </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查看操作记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git reset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hard 版本号 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 回退到某个版本，注意--hard的用法。它会丢失所有未提交的更改。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git reset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mixed 版本号 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会保留工作目录和暂存区的更改，但会将HEAD指向合并前的提交，撤销合并的提交。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="什么是-git-stash" tabindex="-1">什么是 <code>git stash</code> <a class="header-anchor" href="#什么是-git-stash" aria-label="Permalink to &quot;什么是 \`git stash\`&quot;">​</a></h2><ul><li><p>git stash 会把所有未提交的修改（包括暂存的和非暂存的）都保存起来，但是不会把<strong>未跟踪的文件</strong>也保存。</p></li><li><p><strong>保存工作进度</strong>：将你的当前工作目录和暂存区中的修改保存起来，以便稍后恢复使用。</p></li><li><p><strong>清空工作目录</strong>：将当前工作目录的状态重置为最近的提交状态，即没有任何未提交的修改。</p></li><li><p>使用<code>git stash</code>的场景： <code>git stash</code>在临时保存工作目录状态方面非常有用，特别是在需要频繁切换分支或处理紧急任务时。它可以保护当前的修改，并帮助你保持工作目录的整洁。</p></li><li><p>在保存完当前分支后，我们就可以正常切换回<code>dev</code>分支修复缺陷并提交部署了。</p></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 暂存所有文件到仓库，方便后续继续修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git stash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 添加描述</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git stash save </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;暂时存储&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 切换到指定分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout dev</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 拉取dev最新代码进行修改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git pull </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保证代码最新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># dev分支修改完毕后，重新切换会自己的分支继续开发。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout my</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 查看当前保存的所有stash列表，每个stash都有一个唯一的标识符和对应的描述信息。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git stash list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 查看某个stash的变更内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">语法：git stash show [stash]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git stash show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p stash@{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// stash@{3} 是git stash list查询出来的标识</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 重新使用stash缓存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 语法一：将某个stash的变更应用到当前工作目录。这个stash不会从stash列表中删除。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果不指定stash，默认会应用最新的stash。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 栗子：git stash apply stash@{3} // stash@{3} 是git stash list查询出来的标识</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git stash apply [stash]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 语法二：与git stash apply类似</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 区别：在应用完stash后会将该stash从stash列表中删除。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git stash pop [stash]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 如果只想恢复某个特定的文件而不是整个stash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以使用git restore命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 语法：git restore --source=stash@{index-某个存储} -- &lt;file_path&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这会将stash@{index-某个存储}中的指定文件还原到当前工作目录。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#  在应用stash的时候，如果与当前分支的其他修改发生冲突,需要解决</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解决冲突后，使用git add命令来标记冲突已解决</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 然后使用git stash drop命令删除stash。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 删除stash缓存：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 语法一：从stash列表中删除某个stash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果不指定stash，默认会删除最新的stash。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git stash drop [stash]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 语法二：删除所有的stash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 慎用，它会清除所有保存的stash记录。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git stash clear</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 注意： git stash并不是唯一的方法来临时储存当前工作目录的修改。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你也可以使用git commit来提交当前的修改，然后再切换到其他分支或进行其他操作。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">当你需要回到之前的状态时，使用git stash或git reset等命令来撤销这个临时提交。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div>`,48),p=[e];function t(h,r,c,d,k,E){return i(),a("div",null,p)}const o=s(l,[["render",t]]);export{g as __pageData,o as default};
