import{_ as s,c as n,o as a,aV as i}from"./chunks/framework.D-slqnxL.js";const p="/vitePress-note-online/engineeringAdvanced/Git/git%E4%BB%93%E5%BA%93%E6%B5%81%E7%A8%8B%E5%9B%BE.png",l="/vitePress-note-online/engineeringAdvanced/Git/Git%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/2.%E7%94%9F%E6%88%90ssh%E7%A7%98%E9%92%A5.png",e="/vitePress-note-online/engineeringAdvanced/Git/Git%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/1.%E5%88%9B%E5%BB%BAssh%E7%A7%98%E9%92%A5-%E6%9C%80%E5%A5%BD%E8%AE%BE%E7%BD%AE%E5%94%AF%E4%B8%80%E5%90%8D%E7%A7%B0.png",t="/vitePress-note-online/engineeringAdvanced/Git/Git%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/9.%E7%94%9F%E6%88%90%E5%A4%9A%E4%B8%AAssh.png",y=JSON.parse('{"title":"","description":"","frontmatter":{"typora-root-url":"..\\\\..\\\\..\\\\..\\\\public"},"headers":[],"relativePath":"pages/engineeringAdvanced/Git/Basic/1_初始化和ssh配置.md","filePath":"pages/engineeringAdvanced/Git/Basic/1_初始化和ssh配置.md","lastUpdated":1727799063000}'),r={name:"pages/engineeringAdvanced/Git/Basic/1_初始化和ssh配置.md"},h=i('<h2 id="git初始化" tabindex="-1">git初始化 <a class="header-anchor" href="#git初始化" aria-label="Permalink to &quot;git初始化&quot;">​</a></h2><ul><li>如果是自己的电脑新安装Git，建议设置账号密码和永久记住账号密码。</li><li>如果是其他电脑，建议使用ssh拉取仓库代码，后面不用了记得在远程仓库中删除对应的秘钥。</li><li>ssh只需要生成一次，配置完成后此电脑中的任何项目上传到自己的仓库都不需要登陆了。</li></ul><p><img src="'+p+`" alt="git仓库流程图"></p><h3 id="设置账号密码" tabindex="-1">设置账号密码 <a class="header-anchor" href="#设置账号密码" aria-label="Permalink to &quot;设置账号密码&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置git名称和邮箱：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global user.name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your Name&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // git config --global user.name &quot;llxgg&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global user.email </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your Email&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // git config --global user.email &quot;12@qq.com&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查看所有git配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输入git密码：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global user.password </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123456&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全局设置记住密码（默认15分钟）：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global credential.helper cache</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全局记住账号密码（设置一个小时之后失效：）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git config credential.helper </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cache --timeout=3600&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全局记住账号密码（长期存储密码：）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global credential.helper store</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 最后，通过 git push 或其他需要验证的操作时输入的用户名和密码将会被存储在一个纯文本文件中，以便以后使用。在这之后的下一次操作就不需要输入相关信息了。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 取消全局记住: 比如更改了密码，这时候全局记住的密码就错误了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// git会提示 fatal: Authentication failed for… 但是没有弹出用户名和密码弹窗，就可以使用如下命令：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unset credential.helper</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="生成ssh" tabindex="-1">生成ssh <a class="header-anchor" href="#生成ssh" aria-label="Permalink to &quot;生成ssh&quot;">​</a></h3><ul><li>在使用gitee或者github的时候，除了通过账户密码认证以访问仓库</li><li>更加推荐和安全的做法还是使用ssh密钥，绑定ssh后，不用输入用户名和密码拉取/更新代码。</li><li>创建密钥命令：</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#  1.创建密钥命令：秘钥名可以不为自己的邮箱，随便一个也行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ssh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keygen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t rsa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;密钥名&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意：密钥名自己取，可以是邮箱也可以是随意的命名。如果需要区分仓库的，最好使用唯一命名。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p>之后会出现两次询问：</p><ul><li><p>第一次询问：请输入秘钥文件名，如果回车则使用默认的文件名：\`\`id_rsa<code>的公钥和</code>id_rsa.pub\`</p></li><li><p>第二次询问：输入密码（可直接 Enter 跳过）</p></li></ul></li><li><p>最后会生成一个 <code>id_rsa私钥</code> 和 <code>id_rsa.pub公钥</code></p><ul><li><code>在C:\\Users\\你的用户名\\.ssh目录</code> 下可以看到生成的密钥文件</li></ul><p><img src="`+l+'" alt="2.生成ssh秘钥"></p></li><li><p>使用文本编辑器打开 <code>id_rsa.pub文件 </code> 并复制里面全部内容，这些内容即为公钥内容，需要配置到gitee或者github里面。</p></li></ul><h3 id="同一电脑上配置多个-ssh" tabindex="-1">同一电脑上配置多个 ssh <a class="header-anchor" href="#同一电脑上配置多个-ssh" aria-label="Permalink to &quot;同一电脑上配置多个 ssh&quot;">​</a></h3><ul><li><p>什么时候需要在一台电脑上配置多个ssh？</p><ul><li>在一台电脑上操作不同的 github 账号（或 gitlab、gitee、coding）就需要多个对应的ssh key。</li><li>因为一个 github 账号只能建一个与账号名相同的仓库。</li></ul></li><li><p>注意：执行 <code>ssh-keygen -t rsa -C &quot;密钥名&quot;</code> 来创建秘钥，如果直接回车的话，会把已有的秘钥覆盖生成新的秘钥文件。</p></li><li><p>怎么样才能创建多个秘钥文件而不被覆盖呢？</p><ul><li>在执行创建秘钥的命令后，回车时，会有两次询问的信息提示，这时候不要直接回车跳过，仔细阅读提示内容。</li><li>第一次询问信息：请输入秘钥文件名，如果回车则使用默认的文件名：``id_rsa<code>的公钥和</code>id_rsa.pub`</li><li>所以在第一次询问的时候，就要给生成的秘钥文件设置唯一的文件名，这样后面再生成新的ssh，就不会覆盖已有的秘钥了。建议和创建秘钥的名称一致。</li></ul><p><img src="'+e+'" alt="1.创建ssh秘钥。最好设置唯一名称"></p><ul><li>按照上面手动更改秘钥文件名，即可生成多个ssh</li></ul><p><img src="'+t+`" alt="9.生成多个ssh"></p></li><li><p>配置每一个秘钥对应的服务器：</p><ul><li><strong>注意：</strong> 如果重新指定了秘钥文件，则必须创建config文件指定哪个秘钥文件对应那个服务，否则是关联不了的。</li></ul></li><li><p>在.ssh文件夹中手动创建config文件或者输入命令<code>touch config</code>生成，并按下面的模板填写，该文件用于配置私钥对应的服务器。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># gitlab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host gitlab.ylwnl.com  　</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HostName gitlab.xxx.com 　　</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PreferredAuthentications publickey  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IdentityFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ssh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gitlab_id_rsa </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># github</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host github.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HostName github.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PreferredAuthentications publickey</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IdentityFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ssh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">github_id_rsa</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># gitee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host gitee.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HostName gitee.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PreferredAuthentications publickey</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IdentityFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ssh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gitee_id_rsa</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>### gitee\` 添加ssh秘钥</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 登陆\`gitee\` --&gt;点击 \`右上角头像选择个人主页\` ---&gt; \`设置 \`--&gt; 找到\`ssh公钥\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ![3.gitee设置ssh](/engineeringAdvanced/Git/Git基础配置/3.gitee设置ssh.png)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 设置 \`ssh公钥\`: 把复制好的秘钥粘贴到公钥框内，点击确认按钮。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ![4.gitee设置ssh](/engineeringAdvanced/Git/Git基础配置/4.gitee设置ssh.png)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 测试\`ssh\`是否绑定成功</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  - 输入：　\`ssh -T git@github.com\`　回车后，出现 \`success\` 等字样就说明设置成功了。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### \`github\` 添加ssh秘钥</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 登陆\`github\` --&gt;点击 \`右上角头像\` ---&gt; \`Setttings \`--&gt; \`SSH and GPG keys \`--＞\`New SSH keys\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ![6.github设置ssh](/engineeringAdvanced/Git/Git基础配置/6.github设置ssh.png)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 添加\`ssh公钥\`: 点击 \`New SSH Key\` 按钮进行添加：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ![7.github设置ssh](/engineeringAdvanced/Git/Git基础配置/7.github设置ssh.png)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 设置 \`ssh公钥\`: 把复制好的秘钥粘贴到公钥框内，点击确认按钮。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ![8.github设置ssh](/engineeringAdvanced/Git/Git基础配置/8.github设置ssh.png)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 测试\`ssh\`是否绑定成功</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  * 输入：　\`ssh -T git@github.com\`　回车后，出现 \`success\` 等字样就说明设置成功了。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### 通过 \`ssh\` 拉取代码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 第一次执行推送或者拉取命令时可能会出现\`the authenticity of host &#39;xxx.com (xxx.xxx.xxx.xxx)&#39; can&#39;t be established.\`的提示，这个不影响使用。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 这个提示信息说的是：无法确定主机“gitee.com...”的真实性。ED25519密钥指纹为...；确定要继续连接（是/否/[指纹]）吗？</span></span>
<span class="line"><span>* 直接输入yes然后回车即可。下一次执行命令就不会有这样的提示了。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ![5.git通过ssh拉取仓库代码](/engineeringAdvanced/Git/Git基础配置/5.git通过ssh拉取仓库代码.png)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### 更换电脑后如何pull代码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* 换了一台电脑，那就不能使用原来的公钥push/pull了，除非重复上面步骤，在新电脑上生成新的密钥。</span></span>
<span class="line"><span>  * 不过我们不需要这样做，只需要把旧电脑上的两个\`id_rsa\`和\`id_rsa.pub\`密钥文件拷贝到新电脑中即可(注意：必须按目录存放：\`C:\\Users\\新电脑用户名\\.ssh\` 用户文件夹下没有\`.ssh\`文件夹就创建一个)。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div>`,12),c=[h];function b(k,g,d,E,u,o){return a(),n("div",null,c)}const A=s(r,[["render",b]]);export{y as __pageData,A as default};
